
Name:Akash Sanjay Gugale
Last 4 digits ID:0756

CSE 6331, Cloud Computing					


Quiz Q6, 3.30, Summer 2020   (c) DL, UTA, 2020


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please send the link, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:AG
     _________________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4a. Using the cloud services provider, all functionality possible should be implemented on that provider.
     (Of course, displaying web pages through a browser and the user interface is "local")

 4b. Upload all data files (*csv, not this quiz) to cloud service, AWS.
  
Show and submit code, when each part is complete, raise your hand and then show us:

 To recieve credit you MUST show (demo) AND submit the code (text only) on Canvas.

 5. There is a text document about the famous story of the Alamo, and the other are Spanish stop words.
    Later questions will ask you to use these files.
    Please put them on  AWS.

 6. On a web page, please show all Spanish stop words that occur in the Alamo story.
    list = []
    
    connection = sql.connect("earthquake.db")
    cursor = connection.cursor()
    query1 = "SELECT * from ssw"

    cursor.execute(query1)
    col = cursor.fetchall()
    cursor.close()

    for i in col:
        list.append(i[0])
    print(list)
    text2 = re.findall('\w+', open('Alamo.txt').read().lower())
    d1 = {}



    for word in text2:
        if word in list and word in d1:
            d1[word] = d1[word] + 1
        elif word in list:
            d1[word] = 1
    return render_template('index.html', out=d1)

 7. For each stop word, on a web page, please show the word before that word and the following word,
    in the Alamo story.
    Then remove all stop words (not the others) and show remaining text.

 8. Please show the N least frequent words in the story, ordered by frequency, where we will give you N.
	@application.route('/q8', methods=['GET', 'POST'])
def q8():
    freq = request.form['freq']
    data = []
    connection = sql.connect("./earthquake.db")
    cursor = connection.cursor()
    query = "SELECT * FROM ssw"
    cursor.execute(query)
    row1 = cursor.fetchall()

    if row1 is not None:
        for row in row1:
            data.append(row[0])
    result = {}
    i = 0
    a1 = re.findall('\w+', open('Alamo.txt', encoding="utf8").read().lower())
    for w in data:
        if q in a1 and q in result:
            result[q] = result[q] + 1
        elif q in alamo:
            result[q] = 1

    sorting = dict(sorted(result.items(), key=lambda x: x[1]))
    sorting.most_common()[:-freq - 1:-1]

    finalData = set(result)

    return render_template('index.html', out=sorting.most_common()[:-freq - 1:-1])
	

 9. Please show any sentences where any date (number) appears.
@application.route('/q9', methods=['GET', 'POST'])
def q9):	
new1 = []
    with open("Alamo.txt",encoding="utf8") as fp:
        for para in fp:
            l1 = para.lower().strip().split(".")
            for i in l1[:-1]:
                new.append(i)
    sentence = []
    for i in new1:
        if "1836" in i or "1834" in i or "1835" in i:
            sentence.append(i)	

 10. We will give you a word (name) on a web page. Please show us all sentences that have that word.
	@application.route('/q10',methods=['GET','POST'])
def q10():
    n = []
    with open("Alamo.txt",encoding="utf8") as fp1:
        for line in fp1:
            lines = line.lower().strip().split(".")
            for i in lines[:-1]:
                new.append(i)
    

    name1 = str(request.form['name'])
    
    sentence = []
    for i in n:
        print(i)
        if name1 in i:
            sentence.append(i)
    if len(sentence) !=0:
        return render_template('index.html', word = sentence )
    

 11. Show us, in a link, the application running and we will try it out. Only for parts 6, 7, 8, 9, 10

 12. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.

