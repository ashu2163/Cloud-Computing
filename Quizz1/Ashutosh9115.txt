
Name: Ashutosh Mehta
Last 4 digits ID: 9115

CSE 6331, Cloud Computing					


Quiz Q1, 3.30, Summer 2 2020   (c) DL, UTA, 2020


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     ANY VIOLATIONS to scholastic honesty, which include working with others during this quiz, communicating with others during
     this quiz, giving anyone or recieving from anyone any information during this quiz or for the next 6 hours after completion
     of this quiz is a honors violation and will result in a -100 points being assessed for this quiz and being reported. 

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please send the link, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     ______AM___________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4a. Using the cloud services provider, all functionality possible should be implemented on that provider.
     (Of course, displaying web pages through a browser and the user interface is "local")

 4b. Upload all data files (*jpg or *png and *csv, not this quiz) to cloud service. 
  
Show and submit code, when each part is complete, raise your hand and then show us:

 To recieve credit you MUST show (demo) AND submit the code (text only) on Canvas.

 5. Show a web page and interface (which resides on the cloud provider) with your 
    Student ID at the top and below that, your name, at the top of every web page dispayed 
    (for this quiz). Please use a large font.
    For this part (question), below that please show Donald Knuth's picture (provided).
    The cloud service provider is IBM Cloud (BlueMix).

<div id="title_bar" class="jumbotron jumbotron-fluid">
      <div class="container">
        <h2 id="student_id">1001709115</h2>
          <h2 id="student_name">Mehta, Ashutosh</h2>
          <img src='../static/knuth.jpg' width="200px" height="200px" />
          <h2 id="counter"></h2>
      </div>
    </div>


 6. Through a web interface (page), allow user to give a person's name, and you show the year, 
    and the corresponding picture (or show "no picture available").

@application.route('/searchbyName',methods=['GET','POST'])
def searchbyName():
    name=request.form['name']
    connection=sql.connect("sql.db")
    cursor=connection.cursor()
    q1="Select Person,Year,Picture from people where Person = '"+str(name)+ "'"
    cursor.execute(q1)
    col=cursor.fetchall()
    
    return render_template('searchbyName.html',col=col)


<form action="/searchbyName" method="post">
           Enter Name:  
          <input  type="text" name="name" >       
          <button type="submit" class="btn btn-default" name="Submit">Submit</button>
        </form>
      </div>
      
      {% if col %}
      <table class='table'>
        {% for c in col %}
          <tr>
            <td>{{ c[0] }}</td> 
            <td><img src='../static/{{ c[2] }}' alt=' No Picture Available' width="200px" height="200px"></td> 
            <td>{{ c[1] }}</td>
          </tr>
        {% endfor %}
      </table>
      {% endif %}


 7. (Web Page) allow a user to give a keyword and you show all corresponding pictures, and description. 
	@application.route('/searchkeyword',methods=['GET','POST'])
	def searchkeyword():
    		name=request.form['name']
    		connection=sql.connect("sql.db")
    		cursor=connection.cursor()
    		q1="Select Person,Description,Picture from people where Description LIKE '%"+str(name)+ "%' or Picture LIKE '%"+str(name) +"%' or Person LIKE '%"+ str(name)  +"%' or Year LIKE '%"+ str(name)  +"%'"
    		cursor.execute(q1)
    		col=cursor.fetchall()
    
    		return render_template('searchID.html',col=col)

<form action="/searchkeyword" method="post" >
        Enter Keyword:
        <input type="text" name="name" >
        <button type="submit" class="btn btn-default" name="Submit">Submit</button>
    </form>
    </div>

    {% if col %}
      <table class='table'>
        {% for c in col %}
          <tr>
            <td>{{ c[0] }}</td> 
            <td><img src='../static/{{ c[2] }}' alt=' No Picture Available' width="200px" height="200px"></td> 
            <td>{{ c[1] }}</td>
          </tr>
        {% endfor %}
      </table>
      {% endif %}


 8. (Web page) allow a user to give a name then modify the description, then after the description is modified,
     you display the corresponding name, picture, and description.

@application.route('/updateDescription',methods=['GET','POST'])
def updateupdateDescription():
    name=request.form['name']
    desc=request.form['desname']
    if name=="" or desc=="":
        return "No string entered"
    connection=sql.connect("sql.db")
    cursor=connection.cursor()
    q1="Update people set Description= '"+str(desc)+"' where Person='"+str(name) +"'"
    cursor.execute(q1)
    connection.commit()
    cursor.close()
    cursor1=connection.cursor()
    q2="Select Person,Picture,Description from people where Person= '"+ str(name) +"'"
    cursor1.execute(q2)
    col=cursor1.fetchall()
    return render_template('updatePicture.html',col=col)


<form action="/updateDescription" method="post">
          Enter Name:<input  type="text" name="name" >
          Enter Description: <input type="text" name="desname"  placeholder='Enter new description'>       
          <button type="submit" class="btn btn-default" name="Submit">Submit</button>
        </form>
      </div>
      
  
      {% if col %}
      <table class='table'>
        {% for c in col %}
          <tr>
            <td>{{ c[0] }}</td>
            <td><img src="../static/{{ c[1] }}" alt="Image added but not found " width="200px" height="200px"/></td>    
            <td>{{ c[2] }}</td>
          </tr>
        {% endfor %}
      </table>
      {% endif %}


 9. Allow a user to replace (with an already existing one) or remove an entire entry when given the name.
    Please implement both functionality.

@application.route('/deleteEntry',methods=['GET','POST'])
def deleteEntry():
    connection=sql.connect("sql.db")
    name=request.form['name1']
    year=request.form['year']
    picture=request.form['pic']
    desc=request.form['desc']
    cursor=connection.cursor()
    if len(year) == 0 and len(desc) == 0 and len(picture) == 0: 
        print("delete==================================")
        query="Delete from people where Person= '"+str(name) + "'"
    else:
        query="Update people set Description= '"+str(desc)+"' , Picture= '"+str(picture)+"' , Year = '"+str(year)+"' where Person='"+str(name) +"'" 
    #connection=sql.connect("sql.db")
    
    
    cursor.execute(query)
    connection.commit()
    cursor.close()

    cursor1=connection.cursor()
    q1="Select * from people"
    cursor1.execute(q1)
    names=cursor1.fetchall()
    cursor1.close()
    return render_template('deleteEntry.html',names=names)

<form action="/deleteEntry" method="post">
      <h3>If you keep all the fields null, then entry with respect to the name will be deleted</h3>
      Select name whose entry you want to delete/update:
      Enter Name:
      <input type="text" name="name1" required >
      Enter Year:
      <input type="text" name="year" >
      Enter Description:
      <input type="text" name="desc" >
      Enter Picture:
      <input type="text" name="pic" >
      <button type="submit" class="btn btn-default" name="Submit">Submit</button>
    </form>
  </div>
  {% if names %}
      <table class='table'>
        {% for c in names %}
          <tr>
            <td>{{ c[0] }}</td> 
            <td>{{ c[1] }}</td> 
            <td><img src='../static/{{ c[2] }}' alt=' No Picture Available' width="200px" height="200px"></td> 
            <td>{{ c[3] }}</td>
          </tr>
        {% endfor %}
      </table>
      {% endif %}




 10. Show us, in a link, the application running and we will try it out. Only for parts 5, 6, 7, 8, 9

 10b. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.

